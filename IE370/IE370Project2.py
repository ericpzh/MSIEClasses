import numpy as np


def main():
    '''
    Compute f_k
    {(0, 0),(1, 0),(0, 1),(2, 0),(1, 1),(0, 2)}
      0       1       2       3     4       5
    '''
    f = [np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([])]
    f[0] = (np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
    f[1] = (np.array([0, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75]))
    f[2] = (np.array([0, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60]))
    f[3] = (np.array([0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100]))
    f[4] = (np.array([0, 0, 95, 95, 95, 95, 95, 95, 95, 95, 95]))
    f[5] = (np.array([0, 0, 80, 80, 80, 80, 80, 80, 80, 80, 80]))
    '''
    Compute P_k
    '''
    P = [np.array([]), np.array([]), np.array([]), np.array([]), np.array([]), np.array([])]
    P[0] = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])
    P[1] = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0.75, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0.75, 0.25, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0.75, 0.25, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0.75, 0.25, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0.75, 0.25, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0.75, 0.25, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0.75, 0.25, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0.75, 0.25, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0.75, 0.25, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.75, 0.25]])
    P[2] = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0.3, 0.7, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0.3, 0.7, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0.3, 0.7, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0.3, 0.7, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0.3, 0.7, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0.3, 0.7, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0.3, 0.7, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0.3, 0.7, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.7, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.7]])
    P[3] = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0.25, 0.5, 0.25, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0.25, 0.5, 0.25, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0.25, 0.5, 0.25, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0.25, 0.5, 0.25, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0.25, 0.5, 0.25, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0.25, 0.5, 0.25, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0.25, 0.5, 0.25, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0.25, 0.5, 0.25, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0.5, 0.25]])
    P[4] = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0.1, 0.65, 0.25, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0.1, 0.65, 0.25, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0.1, 0.65, 0.25, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0.1, 0.65, 0.25, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0.1, 0.65, 0.25, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0.1, 0.65, 0.25, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0.1, 0.65, 0.25, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0.1, 0.65, 0.25, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.65, 0.25]])
    P[5] = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0.04, 0.32, 0.64, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0.04, 0.32, 0.64, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0.04, 0.32, 0.64, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0.04, 0.32, 0.64, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0.04, 0.32, 0.64, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0.04, 0.32, 0.64, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0.04, 0.32, 0.64, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0.04, 0.32, 0.64, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0.32, 0.64]])
    '''
    MDP
    '''
    MV = []
    MA = []
    #i = state , n = time, a_ = action


    for n in range(15): #for each day
        v = []
        a = []
        for i in range(11): #for each state
            V_i = []
            if n == 0: #first day
                for a_ in range(6):
                    V_i.append(f[a_][i])
            elif i == 0: #only 1 state avail
                V_i.append(f[0][i])
            elif i == 1: #only 3 states avail
                for a_ in range(3):
                    V_i.append((f[a_][i]+ np.dot(P[a_][i],MV[n-1])))
            else:
                for a_ in range(6):
                    V_i.append((f[a_][i] + np.dot(P[a_][i], MV[n - 1])))
            v.append(np.max(V_i))
            a.append(np.argmax(V_i))
        MV.append(v)
        MA.append(a)
    return (MV, MA)

MV,MA = main()[0],main()[1]
for i in MV:
    v = []
    for j in i:
        v.append(float("%.2f" % j))
    print(v)
for j in MA:
    print(j)
